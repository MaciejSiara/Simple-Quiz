{"version":3,"sources":["Flashcard.jsx","FlashcardList.jsx","App.js","index.js"],"names":["Flashcard","props","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","flashcard","question","answer","options","window","addEventListener","removeEventListener","className","onClick","style","ref","map","option","key","Date","now","FlashcardList","flashcards","id","decodeString","str","text","document","createElement","innerHTML","value","App","setFlashcards","categories","setCategories","categoryEl","amountEl","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","resQuestion","index","correct_answer","incorrect_answers","a","sort","random","htmlFor","cat","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d96204bf.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nexport default function Flashcard(props) {\r\n   const [flip, setFlip] = useState(false);\r\n   const [height, setHeight] = useState(\"initial\");\r\n\r\n   const frontEl = useRef();\r\n   const backEl = useRef();\r\n\r\n   function setMaxHeight() {\r\n      const frontHeight = frontEl.current.getBoundingClientRect().height;\r\n      const backHeight = backEl.current.getBoundingClientRect().height;\r\n      setHeight(Math.max(frontHeight, backHeight, 100));\r\n   }\r\n\r\n   useEffect(setMaxHeight, [\r\n      props.flashcard.question,\r\n      props.flashcard.answer,\r\n      props.flashcard.options,\r\n   ]);\r\n   useEffect(() => {\r\n      window.addEventListener(\"resize\", setMaxHeight);\r\n      return () => window.removeEventListener(\"resize\", setMaxHeight);\r\n   }, []);\r\n\r\n   return (\r\n      <div\r\n         className={`card ${flip ? \" flip\" : \"\"}`}\r\n         onClick={() => setFlip(!flip)}\r\n         style={{ height: height }}\r\n      >\r\n         <div className=\"front\" ref={frontEl}>\r\n            {flip ? props.flashcard.answer : props.flashcard.question}\r\n            <div className=\"flashcard-options\">\r\n               {props.flashcard.options.map(option => {\r\n                  return <div className=\"flashcard-option\" key={`${option}-${Date.now()}`}>{option} </div>;\r\n               })}\r\n            </div>\r\n         </div>\r\n         <div className=\"back\" ref={backEl}>\r\n            {props.flashcard.answer}\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport FlashCard from \"./Flashcard\";\r\n\r\nexport default function FlashcardList(props) {\r\n   return (\r\n      <div className=\"card-grid\">\r\n         {props.flashcards.map(flashcard => {\r\n            return <FlashCard flashcard={flashcard} key={flashcard.id} />;\r\n         })}\r\n      </div>\r\n   );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport FlashcardList from \"./FlashcardList\";\nimport \"./App.scss\";\nimport axios from \"axios\";\n\nfunction App() {\n   const [flashcards, setFlashcards] = useState([]);\n   const [categories, setCategories] = useState([]);\n   const categoryEl = useRef();\n   const amountEl = useRef();\n\n   useEffect(() => {\n      axios.get(\"https://opentdb.com/api_category.php\").then(res => {\n         setCategories(res.data.trivia_categories);\n      });\n   }, []);\n\n   return (\n      <>\n         <form className=\"header\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n               <label htmlFor=\"category\">Category</label>\n               <select id=\"category\" ref={categoryEl}>\n                  {categories.map(cat => {\n                     return (\n                        <option value={cat.id} key={cat.id}>\n                           {cat.name}\n                        </option>\n                     );\n                  })}\n               </select>\n            </div>\n            <div className=\"form-group\">\n               <label htmlFor=\"amount\">Number of Questions</label>\n               <input\n                  type=\"number\"\n                  id=\"amount\"\n                  min=\"1\"\n                  step=\"1\"\n                  defaultValue={10}\n                  ref={amountEl}\n               />\n            </div>\n            <div className=\"form-group\">\n               <button className=\"btn\">Generate</button>\n            </div>\n         </form>\n         <div className=\"container\">\n            <FlashcardList flashcards={flashcards} />\n         </div>\n      </>\n   );\n\n   function handleSubmit(e) {\n      e.preventDefault();\n      axios\n         .get(\"https://opentdb.com/api.php\", {\n            params: {\n               amount: amountEl.current.value,\n               category: categoryEl.current.value,\n            },\n         })\n         .then(res => {\n            setFlashcards(\n               res.data.results.map((resQuestion, index) => {\n                  const answer = decodeString(resQuestion.correct_answer);\n                  const options = [\n                     ...resQuestion.incorrect_answers.map(a => decodeString(a)),\n                     answer,\n                  ];\n                  return {\n                     id: `${index}-${Date.now()}`,\n                     question: decodeString(resQuestion.question),\n                     answer: answer,\n                     options: options.sort(() => Math.random() - 0.5),\n                  };\n               })\n            );\n         });\n   }\n}\n\nfunction decodeString(str) {\n   const text = document.createElement(\"textarea\");\n   text.innerHTML = str;\n   return text.value;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}